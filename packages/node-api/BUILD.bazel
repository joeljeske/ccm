load("@npm//@bazel/typescript:index.bzl", "ts_library")
load("@npm//rollup:index.bzl", "rollup")
load("@build_bazel_rules_nodejs//:index.bzl", "npm_package_bin", "pkg_npm")
load("//tools/create-npm-json:index.bzl", "create_npm_json")
load("//:npm_substitutions.bzl", "npm_substitutions")

npm_package_bin(
    name = "templates",
    args = ["$(@D)"],
    output_dir = True,
    tool = "//packages/templates:copy",
)

ts_library(
    name = "compile",
    srcs = glob(["*.ts"]),
    module_name = package_name(),
    visibility = [
        # bundled into these packages:
        "//packages/cli:__pkg__",
        "//packages/webpack/loader:__pkg__",
    ],
    deps = [
        "//packages/postcss-css-components:compile",
        "@npm//@types/lodash.template",
        "@npm//@types/minimist",
        "@npm//@types/node",
        "@npm//postcss",
    ],
)

filegroup(
    name = "esm",
    srcs = [
        "compile",
        "//packages/postcss-css-components:compile",
    ],
    output_group = "es6_sources",
)

rollup(
    name = "bundle",
    outs = ["main.js"],
    args = [
        "$(RULEDIR)",
        "--file $@",
        "--format cjs",
        "--exports named",
        "--silent",
        "--plugin @rollup/plugin-node-resolve",
        "--plugin @rollup/plugin-commonjs",
    ],
    data = [
        "esm",
        "@npm//@rollup/plugin-commonjs",
        "@npm//@rollup/plugin-node-resolve",
        "@npm//css-selector-tokenizer",
        "@npm//lodash.template",
        "@npm//minimist",
        "@npm//postcss",
        "@npm//postcss-modules",
    ],
)

create_npm_json(name = "package-json")

pkg_npm(
    name = "npm",
    substitutions = npm_substitutions,
    tags = ["npm_public"],
    deps = [
        "README.md",
        ":bundle",
        ":package.json",
        ":templates",
    ],
)
